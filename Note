fn a(a:&String)->&String
编译器一看到这种函数形式（签名）就报错其实很好理解：
首先，函数内部变量的生命在返回时就结束了，不可能返回一个引用（悬垂指针 dangling）
其次，编译器在外部，只能看到一个引用进入了这个函数，编译器很有可能误认为这个引用的生命在之后就结束了
万万没有想到这个引用被返回了，从而造成数据竞争（racing problem同时读写）
所以这里强制要求表明生命周期


autoDeref Rust的自动解引用实在是令人惊叹，这也太智能了

mut是变量的属性，不是值的属性，当vec所有权转移时，可变性不会跟着转移
let mut a=vec![1,2,3]